# Python code @beducode
 

import base64, codecs
magic = ''
love = ''
god = 'IjoNCiAgICAgICAgICAgIHJlZ2lzdGVyYWNjb3VudCgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZWdlbWFpbCA9IGlucHV0KHB1dGloMiArICJcciIgKyAifHwgIiArICJEYWZ0YXJrYW4gZW1haWwgYW5kYSA6ICIgKyByZXMpDQogICAgICAgICAgICBpZiByZWdlbWFpbCA9PSAiIiBvciByZWdlbWFpbCA9PSAiICI6DQogICAgICAgICAgICAgICAgcmVnaXN0ZXJhY2NvdW50KCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY2VrbWFpbCA9IGNoZWNrZW1haWwocmVnZW1haWwpDQogICAgICAgICAgICAgICAgaWYgY2VrbWFpbDoNCiAgICAgICAgICAgICAgICAgICAgc3VibWl0cmVnaXN0ZXIocmVndXNlcm5hbWUsIHJlZ3Bhc3N3b3JkLCByZWdlbWFpbCkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICByZWZyZXNoX3BhZ2UoKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgbm90dmFsaWRlbWFpbCA9IGlucHV0KHB1dGloMiArICJcciIgIj4+ICIgKyAiRm9ybWF0IGVtYWlsIGthbXUgdGlkYWsgdmFsaWQsICIgKyByZXMgKyAiLCBTaWxhaGthbiB0ZWthbiBlbnRlciB1bnR1ayBtZW5ndWxhbmcga2VtYmFsaSAiICsgcmVzKQ0KICAgICAgICAgICAgICAgICAgICBpZiBub3R2YWxpZGVtYWlsID09ICIiOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJhY2NvdW50KCkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyYWNjb3VudCgpDQoNCiMjIFNVQk1JVCBSRUdJU1RFUg0KZGVmIHN1Ym1pdHJlZ2lzdGVyKHVzZXJjLCBwYXNzYywgZW1haWxjKToNCiAgICB1cmwgPSBuYXZpZ2F0ZV9hcGkoMSkNCiAgICANCiAgICBkYXRhcmVnID0gew0KICAgICAgICAidXNlcl9uYW1lIiA6IHVzZXJjLA0KICAgICAgICAidXNlcl9lbWFpbCIgOiBlbWFpbGMsDQogICAgICAgICJwYXNzd29yZCIgOiBwYXNzYywNCiAgICAgICAgImFncmVlbWVudCIgOiAxLA0KICAgICAgICAicmVmZXJyZXIiOiA0MjI5NiwNCiAgICAgICAgImFwaV9rZXkiOiBhcGlBa3Nlcw0KICAgIH0NCiAgICANCiAgICByZWdpc3RlcmRhdGEgPSBqc29uLmR1bXBzKGRhdGFyZWcpDQogICAgDQogICAgcmVnbmV3dXNlciA9IGNhbGxfYXBpKCJQT1NUIiwgdXJsLCBoZWFkZXIsIHJlZ2lzdGVyZGF0YSkNCiAgICANCiAgICBpZiByZWduZXd1c2VyWyJzdWNjZXNzIl06DQogICAgICAgIG9iWyJBY2NvdW50Il1bInVzZXJuYW1lIl0gPSB1c2VyYw0KICAgICAgICBvYlsiQWNjb3VudCJdWyJwYXNzd29yZCJdID0gcGFzc2MNCiAgICAgICAgZiA9IG9wZW4oInNldHRpbmdzLmpzb24iLCAidyIpDQogICAgICAgIGYud3JpdGUoanNvbi5kdW1wcyhvYiwgaW5kZW50PTEpKQ0KICAgICAgICBmLmNsb3NlKCkNCiAgICAgICAgDQogICAgICAgIHJlZnJlc2hfcGFnZSgpDQogICAgICAgIA0KICAgICAgICByZWdzdWNjZXNzID0gaW5wdXQoaGlqYXUyICsgIlxyIiAiPj4gIiArICJTZWxhbWF0IHJlZ2lzdHJhc2kga2FtdSBiZXJoYXNpbCEhICIgKyByZXMgKyAiLCBTaWxhaGthbiBsYWt1a2FuIGRlcG9zaXQuIFNpbGFoa2FuIHRla2FuIGVudGVyIHVudHVrIG1lbGFuanV0a2FuICIgKyByZXMpDQogICAgICAgIGlmIHJlZ3N1Y2Nlc3MgPT0gIiI6DQogICAgICAgICAgICBwYXNzDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwYXNzDQogICAgZWxzZToNCiAgICAgICAgcmVmcmVzaF9wYWdlKCkNCiAgICAgICAgDQogICAgICAgIHJlZ2ZhaWxlZCA9IGlucHV0KG1lcmFoMiArICJcciIgIj4+ICIgKyAiUmVnaXN0cmFzaSBhbmRhIGdhZ2FsISEgIiArIHJlcyArICIsIERhdGEgc3VkYWggcGVybmFoIHRlcmRhZnRhci4gU2lsYWhrYW4gdGVrYW4gZW50ZXIgdW50dWsgbWVuZ3VsYW5nICIgKyByZXMpDQogICAgICAgIGlmIHJlZ2ZhaWxlZCA9PSAiIjoNCiAgICAgICAgICAgIHJlZ2lzdGVyYWNjb3VudCgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZWdpc3RlcmFjY291bnQoKQ0KDQoNCiMgUkVHSVNURVIgVElNRQ0KZGVmIGRhdGVyZWdpc3RlcigpOg0KICAgIG5vdyA9IGRhdGV0aW1lLm5vdygpDQoNCiAgICB5ZWFyID0gbm93LnN0cmZ0aW1lKCIlWSIpDQogICAgbW9udGggPSBub3cuc3RyZnRpbWUoIiVtIikNCiAgICBkYXkgPSBub3cuc3RyZnRpbWUoIiVkIikNCiAgICB0aW1lID0gbm93LnN0cmZ0aW1lKCIlSDolTTolUyIpDQoNCiAgICBkYXRlX3JlZ2lzdGVyID0gbm93LnN0cmZ0aW1lKCIlZC8lbS8leSAlSDolTTolUyIpDQoNCiAgICByZXR1cm4gZGF0ZV9yZWdpc3Rlcg0KDQojIyBSRUcgT04gU0VSVkVSDQpkZWYgcmVnaXN0ZXJvbnNlcnZlcihpcCk6DQogICAgDQogICAgcmVnaXN0ZXJhY2NvdW50KCkNCiAgICANCiAgICB0cnk6DQogICAgICAgIGNyZWF0ZWFjYyA9IGNsaWVudC5xdWVyeSgNCiAgICAgICAgICAgIHEuY3JlYXRlKA0KICAgICAgICAgICAgICAgIHEuY29sbGVjdGlvbigicGFzaW5vX3VzZXJfdHJpYWwiKSwNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICJkYXRhIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgImlwIjogc3RyKGlwKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICJ1c2VybmFtZSI6IHN0cihyZWd1c2VybmFtZSksDQogICAgICAgICAgICAgICAgICAgICAgICAicmVnZGF0ZSI6IHN0cihkYXRlcmVnaXN0ZXIoKSksDQogICAgICAgICAgICAgICAgICAgICAgICAibWVtYmVyX3N0YXR1cyI6ICIxIiwNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICApDQogICAgICAgICkNCg0KICAgICAgICB2YWxpZGF0ZW9uc2VydmVyKHJlZ3VzZXJuYW1lKQ0KICAgICAgICBzdGF0dXMgPSAxDQogICAgZXhjZXB0Og0KICAgICAgICBzdGF0dXMgPSAwDQoNCiAgICByZXR1cm4gc3RhdHVzIA0KDQojIyBDSEVDS0lEIE9OIFNFUlZFUg0KZGVmIGNoZWNrcmVnaXN0ZXJzZXJ2ZXIodXNyKToNCiAgICB0cnk6DQogICAgICAgIG1lbWJlciA9IGNsaWVudC5xdWVyeShxLmdldChxLm1hdGNoKHEuaW5kZXgoInBhc2lub19jaGVja191c2VyX3RyaWFsIiksIHN0cih1c3IpKSkpDQoNCiAgICAgICAgc3RhdHVzID0gbWVtYmVyWyJkYXRhIl1bIm1lbWJlcl9zdGF0dXMiXQ0KDQogICAgZXhjZXB0Og0KICAgICAgICBzdGF0dXMgPSAwDQoNCiAgICByZXR1cm4gc3RhdHVzDQoNCg0KIyMgTUVTU0FHRSBGUk9NIFNFUlZFUg0KZGVmIG1lc3NhZ2Vmcm9tc2VydmVyKCk6DQogICAgcmVmcmVzaF9wYWdlKCkNCiAgICANCiAgICBwcmludChwdXRpaDIgKyAiVmVyc2kgQm90IEZyZWUgU3VkYWggIiArIHJlcyArIG1lcmFoMiArICJPRkYiICsgcmVzKQ0KICAgIHByaW50KHB1dGloICsgIlNpbGFoa2FuIGh1YnVuZ2kgYWRtaW4gdW50dWsgaW5mbyBsZWJpaCBsYW5qdXQiICsgcmVzKQ0KICAgIHRpbWUuc2xlZXAoMSkNCiAgICBzeXMuZXhpdCgpICAgIA0KDQojIyBUVVJOIE9OIE9GRiBTRVJWRVINCmRlZiB0dXJub25zZXJ2ZXIoKToNCiAgICB0cnk6DQogICAgICAgIGNlayA9IGNsaWVudC5xdWVyeSgNCiAgICAgICAgICAgIHEuZ2V0KHEubWF0Y2gocS5pbmRleCgiZmluZF9ib3Rfc2VydmVyIiksICJwYXNpbm8iKSkpDQogICAgICAgIHN0YXR1cyA9IGludChjZWtbImRhdGEiXVsiYWN0aXZhdGVkX3N0YXR1cyJdKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgc3RhdHVzID0gMA0KDQogICAgcmV0dXJuIHN0YXR1cw0KDQoNCiMjIEtFWQ0KZGVmIGdldGtleWFwaSgpOg0KICAgIHRyeToNCiAgICAgICAgZ2V0a2V5ID0gY2xpZW50LnF1ZXJ5KA0KICAgICAgICAgICAgcS5nZXQocS5tYXRjaChxLmluZGV4KCJwYXJhbV9ieV9pZCIpLCAicGFzaW5vIikpKQ0KICAgICAgICBrZXkgPSBnZXRrZXlbImRhdGEiXVsia2V5Il0NCiAgICBleGNlcHQ6DQogICAgICAgIGtleSA9ICIiDQoNCiAgICByZXR1cm4ga2V5DQoNCiMjIFZBTElEQVRFIFNFUlZFUg0KZGVmIHZhbGlkYXRlb25zZXJ2ZXIoZGF0YXVzZXIpOg0KICAgIGdsb2JhbCBsb2dpbnVzZXINCiAgICBnbG9iYWwgbG9naW5wYXNzDQogICAgDQogICAgaG9zdG5hbWUgPSBzb2NrZXQuZ2V0aG9zdG5hbWUoKQ0KICAgIGlwID0gc29ja2V0LmdldGhvc3RieW5hbWUoaG9zdG5hbWUpDQogICAgDQogICAgY2hlY2sgPSBjaGVja3JlZ2lzdGVyc2VydmVyKGRhdGF1c2VyKSANCiAgICBpZiBpbnQoY2hlY2spICE9IDE6DQogICAgICAgIHJlZ2lzdGVyb25zZXJ2ZXIoaXApDQogICAgZWxzZToNCiAgICAgICAgbG9naW51c2VyID0gb2JbIkFjY291bnQiXVsidXNlcm5hbWUiXQ0KICAgICAgICBsb2dpbnBhc3MgPSBvYlsiQWNjb3VudCJdWyJwYXNzd29yZCJdDQogICAgICAgIHBhc3MNCg0KIyMgR0FURSBWQUxVRQ0KZGVmIGdhdGVWYWx1ZShjaCk6DQogICAgZ2F0ZSA9IHJldm11bHRpKHN0cihpbnQoZmxvYXQoOTUgLyBjaCkgKiAoMTAgKiogNSkpKSkNCiAgICANCiAgICByZXR1cm4gaW50KGZsb2F0KGdhdGUpKQ0KDQojIyBDQUxDVUxBVEVEIFBBWSBMT1NFDQpkZWYgcGF5bG9zZWNhbGMoY2gsIGJldCwgdGxvc2UsIGJhc2UpOg0KICAgIGlmIHRsb3NlID4gMDoNCiAgICAgICAgb2RkcyA9IHJldm11bHRpKHN0cihpbnQoZmxvYXQoOTUgLyBjaCkgKiAoMTAgKiogNSkpKSkNCiAgICAgICAgDQogICAgICAgIHJlbWFpbiA9IHRsb3NlDQogICAgICAgIG5ld19iZXQgPSBpbnQocmVtYWluIC8gaW50KGZsb2F0KG9kZHMpKSkNCiAgICAgICAgbmV3X2NhbF9wcm9maXQgPSAoKG5ld19iZXQgKyBiYXNlKSAqIGludChmbG9hdChvZGRzKSkpDQogICAgICAgIHdoaWxlIG5ld19jYWxfcHJvZml0IDwgaW50KHRsb3NlKToNCiAgICAgICAgICAgIG5ld19iZXQgKz0gMTAwDQogICAgICAgICAgICBuZXdfYmV0ID0gaW50KChuZXdfYmV0KSAvIGludChmbG9hdChvZGRzKSkpDQogICAgICAgICAgICBuZXdfY2FsX3Byb2ZpdCA9ICgobmV3X2JldCArIGJhc2UpICogaW50KGZsb2F0KG9kZHMpKSkNCg0KICAgICAgICBuZXdfYmV0ID0gaW50KG5ld19iZXQgKyBiYXNlKQ0KICAgIGVsc2U6DQogICAgICAgIG5ld19iZXQgPSBpbnQoYmFzZSArIDEwMCkgICAgDQoNCiAgICByZXR1cm4gbmV3X2JldA0KICAgIA0KZGVmIGRpY2UodHcsIGxzLCB0a3AsIHNwKToNCiAgICBub193aW4gPSAwDQogICAgbm9fbG9zZSA9IDANCiAgICB0b3RhbF93aW4gPSAwDQogICAgdG90YWxfbG9zZSA9IDANCiAgICB0b3RhbHByb2ZpdCA9IDANCiAgICBtYXhiZXQgPSAwDQogICAgYmFsYmV0ID0gMA0KICAgIHRtcGJhbGJldCA9IDANCiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkNCiAgICBzdGF0c19yb2xlYmV0X2xvc2UgPSBGYWxzZQ0KICAgIHN0YXRzX3JvbGViZXRfd2luID0gRmFsc2UNCiAgICByb2xlYmV0ID0gIiBIICINCiAgICByb2xlU3RhdHVzID0gVHJ1ZQ0KDQogICAgTUMxID0gRmFsc2UNCiAgICBNQzIgPSBGYWxzZQ0KICAgIGNvbmRpdGlvbiA9ICIiDQogICAgc3BpbiA9IDANCiAgICBtYXJrZXRpZHggPSAwDQogICAgcnNyb2xsID0gMA0KICAgIHJvbGxjb3VudCA9IDANCiAgICByb2xsID0gMA0KICAgIGFtb3VudCA9IDANCiAgICBhbW91bnRiYWwgPSAwDQogICAgc2F2ZXByb2ZpdHN0cyA9IEZhbHNlDQogICAgbG9zZWxpbWl0c3RzID0gRmFsc2UNCiAgICBzdGFydGJldCA9IGR0LmRhdGV0aW1lLnRvZGF5KCkudGltZXN0YW1wKCkNCiAgICANCiAgICBjeSA9IG9iWyJBY2NvdW50Il1bIkN1cnJlbmN5Il0NCiAgICANCiAgICBtZXRob2RzID0gbmF2aWdhdGVfd3MoMikNCiAgICB2YWxpZGF0ZV9iZXQgPSBnZXRfYmV0aW5mbyhtZXRob2RzLCBjeS51cHBlcigpKQ0KDQogICAgbWluX2JldCA9IGludChmbG9hdCh2YWxpZGF0ZV9iZXRbIm1pbmltdW1fYmV0Il0pICogKDEwICoqIDgpKQ0KICAgIA0KICAgICMjIENFSyBNSU5JTUFMIEJBTEFOQ0UNCiAgICBpZiAoY3VycmJhbGFuY2UvMTAwMDAwMDApIDwgbWluX2JldDoNCiAgICAgICAgdmFsaWRhdGVtaW5iYWxhbmNlKG1pbl9iZXQgKiAxMDAwMDAwMCwgY3kudXBwZXIoKSkNCiAgICANCiAgICAjIyBCQUxBTkNFIE5PVCBJTkZMVUVOQ0UNCiAgICBpZiAoY3VycmJhbGFuY2UpIDw9IG1pbl9iZXQ6DQogICAgICAgIHZhbGlkYXRlYmFsYW5jZShtaW5fYmV0LCBjeS51cHBlcigpKQ0KDQogICAgYmFzZWJldCA9IGludChmbG9hdChvYlsiQmV0c2V0Il1bbm9iZXRdWyJCYXNlIEJldCJdKSAqICgxMCAqKiA4KSkNCiAgICAgICAgDQogICAgcGF5aW4gPSBiYXNlYmV0DQogICAgcHJvZml0ZGl2ID0gaW50KGZsb2F0KG9iWyJCZXRzZXQiXVtub2JldF1bIk1vZGUxIl1bIlByb2ZpdCJdKSAqICgxMCAqKiA4KSkNCiAgICBzd2l0Y2hDaGFuY2UgPSBGYWxzZQ0KICAgIE1DMU1pbiA9IG9iWyJCZXRzZXQiXVtub2JldF1bIk1vZGUxIl1bIk11bHRpIFdpbiJdWyJMQ01pbiJdDQogICAgTUMxTWF4ID0gb2JbIkJldHNldCJdW25vYmV0XVsiTW9kZTEiXVsiTXVsdGkgV2luIl1bIkxDTWF4Il0NCiAgICBNQzJNaW4gPSBvYlsiQmV0c2V0Il1bbm9iZXRdWyJNb2RlMSJdWyJNdWx0aSBMb3NlIl1bIkxDTWluIl0NCiAgICBNQzJNYXggPSBvYlsiQmV0c2V0Il1bbm9iZXRdWyJNb2RlMSJdWyJNdWx0aSBMb3NlIl1bIkxDTWF4Il0NCiAgICBkYWxtID0gMA0KICAgIHRtcGxvc2UgPSAwDQogICAgdG1wcHJvZml0ID0gMA0KDQogICAgYW1vdW50ID0gcGF5aW4NCiAgICANCiAgICBjaGFuY2V2YWwgPSByYW5kb21DaGFuY2UoTUMxTWluLCBNQzFNYXgpDQogICAgY2hhbmNlcmFuZCA9IHJhbmdlQ2hhbmNlKGNoYW5jZXZhbCkNCg0KICAgIGlmIGJhc2ViZXQgPCBtaW5fYmV0Og0KICAgICAgICB2YWxpZGF0ZWJldChtaW5fYmV0LCBwaWxjdXJyKQ0KICAgIGVsc2U6DQogICAgICAgIHBhc3MNCg0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIGtleWJvYXJkLmFkZF9ob3RrZXkoc3RvcG9ud2lua2V5LCBzdG9wb253aW5fdHJpZ2VyKQ0KICAgICAgICByc3JvbGwgKz0gMQ0KICAgICAgICANCiAgICAgICAgaWYgKG9iWyJTaG93IFByaWNlIl0gPT0gIk9OIiBvciBvYlsiU2hvdyBQcmljZSJdID09ICJPbiIgb3Igb2JbIlNob3cgUHJpY2UiXSA9PSAib24iKToNCiAgICAgICAgICAgIGlmIHNwaW4gPT0gMDoNCiAgICAgICAgICAgICAgICBtYXJrZXRpZHggPSBpbmRvZGF4KGN5KQ0KDQogICAgICAgICAgICBzcGluICs9IDENCg0KICAgICAgICAgICAgaWYgc3BpbiA9PSAxMDAwMDoNCiAgICAgICAgICAgICAgICBtYXJrZXRpZHggPSBpbmRvZGF4KGN5KQ0KICAgICAgICAgICAgICAgIHNwaW4gPSAxDQoNCiAgICAgICAgY3VycmVudF90aW1lID0gdGltZS50aW1lKCkNCiAgICAgICAgZWxhcHNlZF90aW1lID0gY3VycmVudF90aW1lIC0gc3RhcnRfdGltZQ0KICAgICAgICANCiAgICAgICAgaWYgcm9sZVN0YXR1cyBpcyBUcnVlOg0KICAgICAgICAgICAgY29uZGl0aW9uID0gMg0KICAgICAgICAgICAgcm9sZWJldCA9ICIgSCAiDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBjb25kaXRpb24gPSAxDQogICAgICAgICAgICByb2xlYmV0ID0gIiBMICINCiAgICAgICAgDQogICAgICAgIHZfb2RkcyA9IHJldm11bHRpKHN0cihpbnQoZmxvYXQoOTUgLyBjaGFuY2V2YWwpICogKDEwICoqIDUpKSkpDQogICAgICAgIHJhbmRvbXNlZWQgPSBoYXNobGliLm1kNShnZXRwYXNzLmdldHVzZXIoKS5lbmNvZGUoKSkNCiAgICAgICAgY2xpZW50X3NlZWQgPSByYW5kb21zZWVkLmhleGRpZ2VzdCgpDQoNCiAgICAgICAgY2FsX3Byb2ZpdCA9ICJ7Oi4xM2Z9Ii5mb3JtYXQoZmxvYXQoKERlY2ltYWwocmV2KHN0cihhbW91bnQpKSkgKiBEZWNpbWFsKHZfb2RkcykpIC0gRGVjaW1hbChyZXYoc3RyKGFtb3VudCkpKSkpDQogICAgICAgIHdpbl9wcm9maXQgPSAgc3RyKGNhbF9wcm9maXQpDQogICAgICAgIA0KICAgICAgICAjIyBMT1NFIExJTUlUDQogICAgICAgIGlmIGxvc2VsaW1pdHN0czoNCiAgICAgICAgICAgIGNhbGxvc2VsaW1pdCA9IGFtb3VudGJhbCAtIGFtb3VudA0KICAgICAgICAgICAgaWYgY2FsbG9zZWxpbWl0IDw9IHRhcmdldGxvc2V2YWw6DQogICAgICAgICAgICAgICAgIyBMT1NFIFRBUkdFVA0KICAgICAgICAgICAgICAgIGJsID0gYW1vdW50YmFsDQogICAgICAgICAgICAgICAgdGwgPSB0YXJnZXRsb3NldmFsDQogICAgICAgICAgICAgICAgdHAgPSAiJWREICVkSCAlZE0gJWRTIiAlIHRpbWVwcm9jZXNzKGludChlbGFwc2VkX3RpbWUpKQ0KICAgICAgICAgICAgICAgIHRhcmdldGxvc3ModGwsIGJsLCBtYXhiZXQsIHRvdGFsX2xvc2UsIHRwKQ0KICAgICAgICANCiAgICAgICAgIyMgU0FWRSBQUk9GSVQNCiAgICAgICAgaWYgc2F2ZXByb2ZpdHN0czoNCiAgICAgICAgICAgIGNhbHNhdmVwcm9maXQgPSBhbW91bnRiYWwgLSBhbW91bnQNCiAgICAgICAgICAgIGlmIGNhbHNhdmVwcm9maXQgPD0gc2F2ZXByb2Y6DQogICAgICAgICAgICAgICAgdHAgPSAiJWREICVkSCAlZE0gJWRTIiAlIHRpbWVwcm9jZXNzKGludChlbGFwc2VkX3RpbWUpKQ0KICAgICAgICAgICAgICAgIHNhdmVwcm9maXQodG90YWxwcm9maXQsIGFtb3VudGJhbCwgbWF4YmV0LCB0b3RhbF9sb3NlLCB0cCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgDQogICAgICAgIA0KICAgICAgICBpZiBhbW91bnRiYWwgPiAwOg0KICAgICAgICAgICAgaWYgYW1vdW50YmFsIDwgYW1vdW50Og0KICAgICAgICAgICAgICAgIGJhbGFuY2V0aWRha2N1a3VwKGFtb3VudGJhbCwgY3kpDQogICAgDQogICAgICAgIG1ldGhvZHMgPSBuYXZpZ2F0ZV93cyg0KQ0KICAgICAgICBiZXR0aW5nID0gY2hhbmNlUGxhY2ViZXQobWV0aG9kcywgYW1vdW50LCBjeS51cHBlcigpLCBjb25kaXRpb24sIHZfb2RkcywgY2hhbmNldmFsLCB3aW5fcHJvZml0LCBjbGllbnRfc2VlZCkNCg0KICAgICAgICBwcm9maXQgPSBiZXR0aW5nWyJwcm9maXQiXQ0KICAgICAgICBzdGF0ZSA9IGJldHRpbmdbIndpbiJdDQogICAgDQogICAgICAgIGJhbCA9IGFtb3VudA0KICAgICAgICBhbW91bnRiYWwgPSBpbnQoZmxvYXQoYmV0dGluZ1siYmFsYW5jZSJdKSAqICgxMCAqKiA4KSkNCiAgICAgICAgbG9zc3RhcmdldCA9IGludChmbG9hdChvYlsiTG9zZSBUYXJnZXQiXSkgKiAoMTAgKiogOCkpDQogICAgICAgIGNhbGN0YXJnZXQgPSBzdGFydGJhbHMgLSBsb3NzdGFyZ2V0DQogICAgICAgICAgICAgIA0KICAgICAgICBpZiB0b3RhbHByb2ZpdCA+PSB0a3A6DQogICAgICAgICAgICB0cCA9ICIlZEQgJWRIICVkTSAlZFMiICUgdGltZXByb2Nlc3MoaW50KGVsYXBzZWRfdG'
destiny = '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O1qTybZvNeVUA0pvulo2kyLzI0XFNeVUWyplNeVPVtVvNeVT1ypzSbZvNeVPVeVvNeVUWyqvumqUVbLzSfXFxtXlOlMKZtXlOvnKW1Zt0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtXlNvVRWuoTShL2HvVPftpzImVPftVvN6VPVtXlOlMKLbp3ElXTWuoTAuoPxcVPftpzImVPftnTydLKHlVPftVvODpz9znKDvVPftpzImVPftVvN6VPVtXlOlMKLbp3ElXUEiqTSfpUWiMzy0XFxtXlOlMKZtXlOeqJ5cozplVPftVvOKLJkfMKDvQDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNeVUWyplNeVPVtBvNvVPftp3ElXUqxXFNeVUWypj0XVPNtVPNtVPNtVPNtVPNtVPNtVPNcQDbtVPNtVPNtVPNtVPNtVPNtMJkmMGbAPvNtVPNtVPNtVPNtVPNtVPNtVPNtpUWcoaDbQDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOlL2AioT9lVPftpzAzo250L29fo3VtXlOwnTShL2IlLJ5xVPftpzImVPftpUWiMzAioT9lVPftpUI0nJtlVPftp3ElXUWioTIvMKDcVPftpzImVPftVvNvVPftoJIlLJtlVPftVv0vVPftpzI2XUA0pvuvLJjcXFNeVUWyplNeVTWcpaHlQDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNeVPVtDzSfLJ5wMFVtXlOlMKZtXlNvVQbtVvNeVUWyqvumqUVbLzSfL2SfXFxtXlOlMKZtXlOgMKWunQVtXlNvVSOlo2McqPVtXlOlMKZtXlNvVQbtVvNeVUWyqvumqUVbqT90LJkjpz9znKDcXFNeVUWyplNeVTg1ozyhMmVtXlNvVSquoTkyqPVAPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPftpzImVPftVvN6VPVtXlOmqUVbq2DcVPftpzImQDbtVPNtVPNtVPNtVPNtVPNtVPNtVPxAPt0XVPNtVPNtVPNtVPNtVPNtVUA3nKEwnRAbLJ5wMFN9VSElqJHAPvNtVPNtVPNtVPNtVPNtVPOxLJkgVQ0tnJ50XTSgo3IhqPNeVTWup2IvMKDcQDbtVPNtVPNtVPNtVPNtVPNtozI3LzI0VQ0tpTS5oT9mMJAuoTZbnJ50XR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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))